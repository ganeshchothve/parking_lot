<% url = Rails.application.routes.url_helpers %>
var Amura = {}
String.prototype.titleize = function() {
  return this.charAt(0).toUpperCase() + this.slice(1);
}
Array.prototype.to_sentence = function() {
  var arr = [];
  if(this.length > 1){
    _.each(this, function(elem){
      arr.push((elem + "").titleize());
    });
    all_but_last = arr.slice(0, (this.length-1));
    last = arr[arr.length - 1];
    str = all_but_last.join(", ");
    str += " and " + last;
    if(typeof str === 'undefined' || str == null){
      return "";
    }
    return str;
  }else if(this.length == 1){
    return ("" + this[0]).titleize();
  }else{
    return "";
  }
}
Amura.global_success_handler = function(message){
  if(message){
    new Noty({text:message, type:"success"});
  }
};
Amura.global_error_handler = function(errors){
  if(errors){
    if(errors || typeof errors == "string"){
      if(errors){
        new Noty({text:"There was some issue with the system. Please contact sell.do support", type:"error"}); // TODO: Finalize this message
      }else{
        new Noty({text:errors, type:"error"});
      }
    }else if(typeof errors == "object"){
      var message = "<ul style='text-align:left;'>";
      _.each(errors, function(err){(message = message + "<li>" + err + "</li>")});
      message = message + "</ul>";
      new Noty({text:message, type:"error"});
    }
  }
};
if($.noty){
  $.noty.defaults = {
    layout:'bottom',
    type: 'success',
    text: '', // can be html or string
    dismissQueue: true, // If you want to use queue feature set this true
    template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
    animation: {
      open: {height: 'toggle'},
      close: {height: 'toggle'},
      easing: 'swing',
      speed: 500
    },
    timeout: 5000,
    killer: false,
    theme: 'bootstrap',
    callback: {
      onShow: function() {},
      afterShow: function() {
        if (this.options.buttons && this.options.override_timeout){
          this.setTimeout(25000);
        }
      },
      onClose: function() {},
      afterClose: function() {}
    },
    maxVisible: 3,
    closeWith: ['button']
  };
}

Amura.removeParamFromURL = function(sourceURL, key) {
  var rtn = sourceURL.split("?")[0], param, params_arr = [], queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
  if (queryString !== "") {
    params_arr = queryString.split("&");
    for (var i = params_arr.length - 1; i >= 0; i -= 1) {
      param = params_arr[i].split("=")[0];
      if (param === key) {
        params_arr.splice(i, 1);
      }
    }
    rtn = rtn + "?" + params_arr.join("&");
  }
  if(rtn.endsWith("?")){
    rtn = rtn.slice(0, (rtn.length-1));
  }
  return rtn;
}


Amura.getParamFromURL = function(url, key){
  var urlParams = {};
  var key = key || "";
  url.replace(
    new RegExp("([^?=&]+)(=([^&]*))?", "g"),
    function($0, $1, $2, $3) {
      urlParams[$1] = $3;
    }
  );
  if(key){
    return urlParams[key];
  }else{
    return urlParams;
  }
}
