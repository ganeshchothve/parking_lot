FormInitializer = (function(){
  var initializeInputs = function(selector){
    _.each($(selector).find('.selectize,.selectize-remote'), function(el){
      if(!_.isEmpty($(el).data("selectize"))){
        $(el).selectize("destroy");
      }
    });
    $(selector).find('.timepicker').datetimepicker({
      format: 'LT',
          icons: {
                    up: "fa fa-chevron-circle-up",
                    down: "fa fa-chevron-circle-down",
                    next: 'fa fa-chevron-circle-right',
                    previous: 'fa fa-chevron-circle-left'
                  }
    });
    _.each($(selector).find('.selectize'), function(e){
      if($(e).data("create")){
        $(e).selectize({create: true});
      }else{
        $(e).selectize();
      }
    });
    $(selector).find('.phone, [type="tel"]').intlTelInput({
			initialCountry: "in",
      formatOnDisplay: false,
			preferredCountries: ["in", "us", "gb"],
			utilsScript: "<%= asset_path('intTelInputUtils.js') %>",
			nationalMode: false
		});
    crs.init();
    $(selector).find('.selectize-tags').selectize({create: true});
    $(selector).find('.array-field').arrayField();
    var startDate = moment(($(selector).find('.daterangefilter').data("startDate") || moment()), "DD/MM/YYYY");
    var endDate = moment(($(selector).find('.daterangefilter').data("endDate") || moment()), "DD/MM/YYYY");
    var opens = $(selector).find('.daterangefilter').data("opens") || 'left';
    var autoUpdate = $(selector).find('.daterangefilter').data('autoUpdate') || false;
    $(selector).find('.daterangefilter').each(function(){
      $(this).daterangepicker({
        startDate: startDate,
        endDate: endDate,
        autoUpdateInput: autoUpdate,
        opens: opens,
        locale: {
          format: 'DD/MM/YYYY'
        },
        ranges: {
           'Today': [moment(), moment()],
           'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
           'Last 7 Days': [moment().subtract(6, 'days'), moment()],
           'Last 1 Month': [moment().subtract(29, 'days'), moment()],
           'Last 6 Months': [moment().subtract(6, 'month'), moment()]
        }
      });
    });
    $(selector).find('.daterangefilter').on('apply.daterangepicker', function(ev, picker) {
      $(this).val(picker.startDate.format(picker.locale.format) + ' - ' + picker.endDate.format(picker.locale.format));
    });
    $(selector).find('.daterangefilter').on('cancel.daterangepicker', function(ev, picker) {
      $(this).val('');
    });

    $(selector).find('.datepicker').each(function(){
      var datepickerOptions = _.clone(Iris.utils.datepickerOptions);
      if($(this).data("minDate")){
        datepickerOptions.minDate = moment($(this).data("minDate"), "DD/MM/YYYY")
      }
      if($(this).data("maxDate")){
        datepickerOptions.maxDate = moment($(this).data("maxDate"), "DD/MM/YYYY")
      }
      if($(this).data("defaultDate")){
        datepickerOptions.defaultDate = moment($(this).data("defaultDate"), "DD/MM/YYYY");
      }
      if($(this).data("inline")){
        datepickerOptions.inline = $(this).data("inline");
      }
      if($(this).data("sideBySide")){
        datepickerOptions.sideBySide = $(this).data("sideBySide");
      }
      if($(this).data("useCurrent")){
        datepickerOptions.useCurrent = $(this).data("useCurrent");
      }
      $(this).datetimepicker(datepickerOptions);
    });

    $(selector).find('.money-field').each(function(){
      var value = $(this).val();
      if(!_.isUndefined(value)) {
        $(this).autoNumeric('init', Iris.utils.autoNumericOptions);
        if(_.isNumber(value)){
          $(this).autoNumeric("set", value);
        }
      }
    });

    $(selector).find(".date_validation").datetimepicker(Iris.utils.datepickerOptions);
    $(selector).find('.datetimepicker').each(function(){
      var datepickerOptions = _.clone(Iris.utils.datetimepickerOptions);
      if($(this).data("minDate")){
        datepickerOptions.minDate = moment($(this).data("minDate"), "DD/MM/YYYY")
      }
      if($(this).data("maxDate")){
        datepickerOptions.maxDate = moment($(this).data("maxDate"), "DD/MM/YYYY")
      }
      if($(this).data("defaultDate")){
        datepickerOptions.defaultDate = moment($(this).data("defaultDate"), "DD/MM/YYYY");
      }
      if($(this).data("inline")){
        datepickerOptions.inline = $(this).data("inline");
      }
      if($(this).data("sideBySide")){
        datepickerOptions.sideBySide = $(this).data("sideBySide");
      }
      if($(this).data("useCurrent")){
        datepickerOptions.useCurrent = $(this).data("useCurrent");
      }
      if($(this).data("format")){
        datepickerOptions.format = $(this).data("format");
      }
      if($(this).data("stepping")){
        datepickerOptions.stepping = $(this).data("stepping");
      }
      $(this).datetimepicker(datepickerOptions);
    });

    FileIcon.init($(".asset-delete"), $(".asset-icon"));
    _.each($(selector).find(".fileupload"), function(){
      $(this).fileUploader({
        download_all: false
      });
    })

    _.each($(selector).find(".selectize-remote"), function(el){
      var url = $(el).data("url");
      var ds = $(el).data("ds");
      if(!_.isEmpty(url)){
        remote_selectize($(el), {ds: ds}, {url: url} );
      }
    });

    _.each($(selector).find(".summernote"), function(el){
      if(!$(el).attr("disabled")){
        $(selector).find(".summernote").summernote({
          disableDragAndDrop: true,
          toolbar: [
            ['style', ['bold', 'italic', 'underline', 'clear']],
            ['font', ['strikethrough', 'superscript', 'subscript']],
            ['fontsize', ['fontsize']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['link', ['link']],
            ['table', ['table']],
            ['height', ['height']]
          ],
          tabsize: 2,
          height: 200
        });
      }
    });
  };

  var init = function(selector){
    initializeInputs($(selector));
    $('[data-toggle="popover"]').popover({
      trigger: 'hover'
    });
    $(".link-to-add").data("association-insertion-method", 'prepend');
    $(selector).on('cocoon:after-insert',function(e, field){
      initializeInputs(field);
    });

    add_payment_mode_event();
    filter_towers(selector);
  };
  var add_payment_mode_event = function(){
    $("#receipt_payment_mode").selectize().on("change", function() {
      if($(this).val() == 'online'){
        $('.offline').addClass('d-none');
        $('.offline').find('input, select').attr('disabled', 'disabled')
      } else {
        $('.offline').removeClass('d-none');
        $('.offline').find('input, select').removeAttr('disabled')
      }
    })
    $("#receipt_payment_mode").trigger('change')
  }
  var remote_selectize_data = function(el){
    var params = $(el).data("params");
    params = params || {};
    params = _.merge( params, {ds: true});
    return params;
  }

  var remote_selectize = function(selector, data, options){
    options = _.extend({}, options);
    data = _.extend({}, data);
    $(selector).selectize({
      plugins: ['infinite_scroll'],
      valueField: options.hasOwnProperty("valueField") ? options["valueField"] : "id",
      labelField: 'name',
      searchField: 'name',
      create: false,
      preload: ( _.isNull($(selector).data("preload")) || _.isUndefined($(selector).data("preload")) ) ? 'focus' : $(selector).data("preload") ,
      load: function(query, callback){
        var queryObj = JSON.parse(query);
        $.ajax({
          url: options["url"],
          type: 'GET',
          dataType: 'json',
          data: _.merge(remote_selectize_data(this.$input), queryObj, {fltrs: {search: queryObj.search}}),
          error: function(one, two, three){
            if(typeof callback == 'function'){
              callback();
            }
          },
          success: function(data, type, options){
            if(typeof callback == 'function'){
              callback(_.map(data, function(a){ return { id: (a['id'] || a._id), name: (a['ds_name'] || a['name']) } }));
            }
          }
        });
      },
    });
  };

  var filter_towers = function(selector){
    var $project_select = $(selector).find(".project_select");
    var $project_tower_select = $(selector).find(".project_tower_select");
    var tower_id = $project_tower_select.val();

    if($project_tower_select.length > 0) {
      $project_select.on("change", function(e){
        var project_id = $(e.currentTarget).val();
        if(!_.isEmpty(project_id)) {
          $.ajax({
            url: $project_tower_select.data("url"),
            data: {
              fltrs: {
                project_id: project_id
              }
            },
            type: "get",
            dataType: "json",
            success: function(data){
              var project_tower_selectize = $project_tower_select[0].selectize;
              project_tower_selectize.setValue('');
              project_tower_selectize.clearOptions();
              project_tower_selectize.renderCache = {};
              var options = _.map(data, function(d) { return { value: d._id, text: d.name } });
              project_tower_selectize.addOption(options)
              project_tower_selectize.refreshOptions(false);
              project_tower_selectize.settings.placeholder = 'Select';
              project_tower_selectize.updatePlaceholder();
              if(!_.isEmpty(tower_id)){
                project_tower_selectize.addItem(tower_id, true);
              }
            },
            error: function(){
              Amura.global_error_handler("Error in fetching the project towers...")
            }
          });
        }
      }).trigger('change');
    }
  };

  return {
    init: init,
    remoteSelectize: remote_selectize,
    filterTowers: filter_towers
  };

})();
$(document).on('nested:fieldAdded', function(event){
  var $field = event.field;
  FormInitializer.init($field);
});
$(document).on('nested:fieldRemoved', function (event) {
  $('[required]', event.field).removeAttr('required');
});
