class RsaEncryptor
  attr_reader :rsa_key, :public_key

  def initialize
    @rsa_key = OpenSSL::PKey::RSA.generate(1024)
    @public_key = @rsa_key.public_key.to_s
  end

  # serializes the data extracted for the key in order to use it in session
  #
  #
  # @return [String] JSON serialized data
  #
  def serialized_data
    params = {}
    rsa_key.params.each { |k, v| params[k] = v.to_s }
    params.to_json
  end

  def self.serialized_data_for_mobile
    {"n"=>
  "118870743955344820900841511336289164957160435980141499395911722582000676264611447086297572360103152131975394396142594242435284326739316140335134562031678595150115370885530473203784972546235463732400493995769288727090137415562624898917094878688415410469913907534481018524314375029781407067153167060339031657719",
 "e"=>"65537",
 "d"=>
  "335552247306693804517382235946312701482745329452464674737074762007264981750051386407144832485757406417984466229555517262775647351065405587103466652057014145727282162119530309151202449072106338817337220479287772292886904704199041343382712022585590485202721009113938317821845910984125754015412240339260511193",
 "p"=>"11015032874247803229389425596298971706132788125930252680711144038244504224959715605629691259535848466016186002615255963525592771676429001713349459151061293",
 "q"=>"10791683085508929093161157457842730605561386263100375620271303239313766007655302717368866389152303984503379288265240835630690162976362972686169722496152883",
 "dmp1"=>"9742884563748671095735938827933210123458587699832535627133735105497008116216256377727725451771885558967091417056031824673872191106386260758341722203773761",
 "dmq1"=>"7847463887668020107615259791696461731071592919123160976780589567358532533177117683165968315727472282672040934752225193457921496207707557399709941941180675",
 "iqmp"=>"6516745191125096849274477792032083329035696102822486213319988952047161236430073396015936086408467958663742356215814943832602717099405778531676324372486620"}.to_json
  end

  def self.public_key_for_mobile
    '-----BEGIN PUBLIC KEY-----
    MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCpRw4QVMTkvzxl8BSUletEhsS/
    e2bX1+KDj3PndGSB99Gae040Jm7l+4nK3Q+NzSHDg12cNCLnnq1qw78SX1U+cqvY
    gdLxR8p6FSxfRznCSzXjmyMk4yLqRqyaZVO+bjf6k5dUrk3dI3p7ptJlpjFBkyfd
    1ZwqX3Y7HlcQka3M9wIDAQAB
    -----END PUBLIC KEY-----
    '
  end

  # Rebuilds RSA key from serialized data
  #
  # @param [String] serialized_key A serialized key
  #
  # @return [OpenSSL::PKey::RSA] A RSA key object
  #
  def self.build_key(serialized_key)
    rsa_key = OpenSSL::PKey::RSA.new(1024)
    rsa_key_params = JSON.parse(serialized_key)
    rsa_key_params.each { |k, v| rsa_key_params[k] = OpenSSL::BN.new(v) }
    rsa_key.set_key(rsa_key_params['n'], rsa_key_params['e'], rsa_key_params['d'])
    rsa_key.set_factors(rsa_key_params['p'], rsa_key_params['q'])
    rsa_key.set_crt_params(rsa_key_params['dmp1'], rsa_key_params['dmq1'], rsa_key_params['iqmp'])
    rsa_key
  end
end